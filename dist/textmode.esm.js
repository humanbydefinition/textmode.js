var b = Object.defineProperty;
var _ = (a, A, e) => A in a ? b(a, A, { enumerable: !0, configurable: !0, writable: !0, value: e }) : a[A] = e;
var E = (a, A, e) => _(a, typeof A != "symbol" ? A + "" : A, e);
class x {
  constructor(A, e, t, B = {}) {
    E(this, "gl");
    E(this, "_framebuffer");
    E(this, "_texture");
    E(this, "_width");
    E(this, "_height");
    E(this, "options");
    E(this, "previousFramebuffer", null);
    E(this, "previousViewport", [0, 0, 0, 0]);
    this.gl = A, this._width = e, this._height = t, this.options = {
      filter: "nearest",
      wrap: "clamp",
      format: "rgba",
      type: "unsigned_byte",
      ...B
    }, this._texture = this.createTexture(), this._framebuffer = this.gl.createFramebuffer(), this.attachTexture();
  }
  createTexture() {
    const A = this.gl.createTexture();
    this.gl.bindTexture(this.gl.TEXTURE_2D, A);
    const e = this.options.filter === "linear" ? this.gl.LINEAR : this.gl.NEAREST, t = this.options.wrap === "repeat" ? this.gl.REPEAT : this.gl.CLAMP_TO_EDGE;
    this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MIN_FILTER, e), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_MAG_FILTER, e), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_S, t), this.gl.texParameteri(this.gl.TEXTURE_2D, this.gl.TEXTURE_WRAP_T, t);
    const B = this.options.format === "rgb" ? this.gl.RGB : this.gl.RGBA, r = this.options.type === "float" ? this.gl.FLOAT : this.gl.UNSIGNED_BYTE;
    return this.gl.texImage2D(
      this.gl.TEXTURE_2D,
      0,
      B,
      this._width,
      this._height,
      0,
      B,
      r,
      null
    ), this.gl.bindTexture(this.gl.TEXTURE_2D, null), A;
  }
  attachTexture() {
    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._framebuffer), this.gl.framebufferTexture2D(
      this.gl.FRAMEBUFFER,
      this.gl.COLOR_ATTACHMENT0,
      this.gl.TEXTURE_2D,
      this._texture,
      0
    ), this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, null);
  }
  /**
   * Update the framebuffer texture with canvas content
   */
  update(A) {
    this.gl.bindTexture(this.gl.TEXTURE_2D, this._texture), this.gl.texImage2D(
      this.gl.TEXTURE_2D,
      0,
      this.gl.RGBA,
      this.gl.RGBA,
      this.gl.UNSIGNED_BYTE,
      A
    ), this.gl.bindTexture(this.gl.TEXTURE_2D, null);
  }
  /**
   * Resize the framebuffer
   */
  resize(A, e) {
    this._width = A, this._height = e, this.gl.bindTexture(this.gl.TEXTURE_2D, this._texture);
    const t = this.options.format === "rgb" ? this.gl.RGB : this.gl.RGBA, B = this.options.type === "float" ? this.gl.FLOAT : this.gl.UNSIGNED_BYTE;
    this.gl.texImage2D(
      this.gl.TEXTURE_2D,
      0,
      t,
      this._width,
      this._height,
      0,
      t,
      B,
      null
    );
  }
  /**
   * Begin rendering to this framebuffer (p5.js-like API)
   */
  begin() {
    this.previousFramebuffer = this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING), this.previousViewport = this.gl.getParameter(this.gl.VIEWPORT), this.bind();
  }
  /**
   * End rendering to this framebuffer and restore previous state (p5.js-like API)
   */
  end() {
    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this.previousFramebuffer), this.gl.viewport(
      this.previousViewport[0],
      this.previousViewport[1],
      this.previousViewport[2],
      this.previousViewport[3]
    );
  }
  /**
   * Bind this framebuffer for rendering
   */
  bind() {
    this.gl.bindFramebuffer(this.gl.FRAMEBUFFER, this._framebuffer), this.gl.viewport(0, 0, this._width, this._height);
  }
  // Getters
  get framebuffer() {
    return this._framebuffer;
  }
  get texture() {
    return this._texture;
  }
  get width() {
    return this._width;
  }
  get height() {
    return this._height;
  }
}
class F {
  constructor(A, e, t, B, r) {
    /** The WebGL rendering context */
    E(this, "gl");
    /** The buffer containing the rectangle vertices */
    E(this, "buffer");
    /** The number of vertices in the rectangle */
    E(this, "numVertices");
    this.gl = A;
    const Q = A.getParameter(A.VIEWPORT), g = Q[2], i = Q[3];
    if (g <= 0 || i <= 0)
      throw new Error(`Invalid viewport dimensions: ${g}x${i}`);
    const s = e / g * 2 - 1, n = 1 - t / i * 2, o = (e + B) / g * 2 - 1, h = 1 - (t + r) / i * 2;
    (s < -1 || s > 1 || o < -1 || o > 1 || n < -1 || n > 1 || h < -1 || h > 1) && console.warn(`Rectangle coordinates outside NDC range: x1=${s}, y1=${n}, x2=${o}, y2=${h}`);
    const c = A.getParameter(A.FRAMEBUFFER_BINDING) !== null ? new Float32Array([
      s,
      h,
      0,
      0,
      // bottom-left
      o,
      h,
      1,
      0,
      // bottom-right
      s,
      n,
      0,
      1,
      // top-left
      s,
      n,
      0,
      1,
      // top-left
      o,
      h,
      1,
      0,
      // bottom-right
      o,
      n,
      1,
      1
      // top-right
    ]) : new Float32Array([
      s,
      h,
      0,
      1,
      // bottom-left
      o,
      h,
      1,
      1,
      // bottom-right
      s,
      n,
      0,
      0,
      // top-left
      s,
      n,
      0,
      0,
      // top-left
      o,
      h,
      1,
      1,
      // bottom-right
      o,
      n,
      1,
      0
      // top-right
    ]);
    this.numVertices = 6, this.buffer = A.createBuffer(), A.bindBuffer(A.ARRAY_BUFFER, this.buffer), A.bufferData(A.ARRAY_BUFFER, c, A.STATIC_DRAW);
  }
  /**
   * Draw the quad using attribute locations from the current shader
   */
  draw() {
    this.gl.bindBuffer(this.gl.ARRAY_BUFFER, this.buffer);
    let A = 0, e = 1;
    this.gl.enableVertexAttribArray(A), this.gl.vertexAttribPointer(A, 2, this.gl.FLOAT, !1, 16, 0), this.gl.enableVertexAttribArray(e), this.gl.vertexAttribPointer(e, 2, this.gl.FLOAT, !1, 16, 8), this.gl.drawArrays(this.gl.TRIANGLES, 0, this.numVertices), this.gl.disableVertexAttribArray(A), this.gl.disableVertexAttribArray(e);
  }
}
class P {
  constructor(A, e, t) {
    E(this, "gl");
    E(this, "program");
    E(this, "uniformLocations", /* @__PURE__ */ new Map());
    E(this, "attributeLocations", /* @__PURE__ */ new Map());
    E(this, "textureUnitCounter", 0);
    this.gl = A, this.program = this.createProgram(e, t), this.cacheLocations();
  }
  createProgram(A, e) {
    const t = this.createShader(this.gl.VERTEX_SHADER, A), B = this.createShader(this.gl.FRAGMENT_SHADER, e), r = this.gl.createProgram();
    if (this.gl.attachShader(r, t), this.gl.attachShader(r, B), this.gl.linkProgram(r), !this.gl.getProgramParameter(r, this.gl.LINK_STATUS)) {
      const Q = this.gl.getProgramInfoLog(r);
      throw new Error(`Shader program link error: ${Q}`);
    }
    return this.gl.deleteShader(t), this.gl.deleteShader(B), r;
  }
  createShader(A, e) {
    const t = this.gl.createShader(A);
    return this.gl.shaderSource(t, e), this.gl.compileShader(t), t;
  }
  cacheLocations() {
    const A = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_UNIFORMS);
    for (let t = 0; t < A; t++) {
      const B = this.gl.getActiveUniform(this.program, t);
      if (B) {
        const r = this.gl.getUniformLocation(this.program, B.name);
        r && this.uniformLocations.set(B.name, r);
      }
    }
    const e = this.gl.getProgramParameter(this.program, this.gl.ACTIVE_ATTRIBUTES);
    for (let t = 0; t < e; t++) {
      const B = this.gl.getActiveAttrib(this.program, t);
      if (B) {
        const r = this.gl.getAttribLocation(this.program, B.name);
        this.attributeLocations.set(B.name, r);
      }
    }
  }
  /**
   * Use this shader program
   */
  use() {
    this.gl.useProgram(this.program), this.resetTextureUnits();
  }
  /**
   * Set a single uniform value with automatic texture unit management
   */
  setUniform(A, e) {
    const t = this.uniformLocations.get(A);
    if (typeof e == "number")
      this.gl.uniform1f(t, e);
    else if (typeof e == "boolean")
      this.gl.uniform1i(t, e ? 1 : 0);
    else if (Array.isArray(e))
      switch (e.length) {
        case 2:
          this.gl.uniform2f(t, e[0], e[1]);
          break;
        case 3:
          this.gl.uniform3f(t, e[0], e[1], e[2]);
          break;
        case 4:
          this.gl.uniform4f(t, e[0], e[1], e[2], e[3]);
          break;
        default:
          console.warn(`Unsupported array length ${e.length} for uniform '${A}'`);
      }
    else if (e instanceof WebGLTexture) {
      const B = this.getNextTextureUnit();
      this.gl.uniform1i(t, B), this.gl.activeTexture(this.gl.TEXTURE0 + B), this.gl.bindTexture(this.gl.TEXTURE_2D, e);
    } else if (e && typeof e == "object" && "texture" in e) {
      const B = this.getNextTextureUnit();
      this.gl.uniform1i(t, B), this.gl.activeTexture(this.gl.TEXTURE0 + B), this.gl.bindTexture(this.gl.TEXTURE_2D, e.texture);
    } else
      console.warn(`Unsupported uniform type for '${A}':`, typeof e);
  }
  getNextTextureUnit() {
    return this.textureUnitCounter++;
  }
  /**
   * Reset texture unit counter (useful when starting a new frame)
   */
  resetTextureUnits() {
    this.textureUnitCounter = 0;
  }
}
var u = "attribute vec2 a_position;attribute vec2 a_texCoord;varying vec2 v_uv;void main(){v_uv=a_texCoord;gl_Position=vec4(a_position,0.0,1.0);}", v = "precision lowp float;uniform sampler2D u_texture;varying vec2 v_uv;void main(){gl_FragColor=texture2D(u_texture,v_uv);}";
class y {
  constructor(A) {
    E(this, "gl");
    E(this, "imageShader");
    E(this, "currentShader", null);
    this.gl = A, this.imageShader = new P(this.gl, u, v), this.setupDefaultState();
  }
  setupDefaultState() {
    this.gl.enable(this.gl.BLEND), this.gl.blendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA), this.gl.disable(this.gl.DEPTH_TEST);
  }
  /**
   * Set the current shader (p5.js-like API)
   */
  shader(A) {
    this.currentShader = A, A.use();
  }
  /**
   * Set a uniform value for the current shader (p5.js-like API)
   */
  setUniform(A, e) {
    this.currentShader.setUniform(A, e);
  }
  /**
   * Draw a rectangle with the current shader (p5.js-like API)
   */
  rect(A, e, t, B) {
    new F(this.gl, A, e, t, B).draw();
  }
  /**
   * Create a new framebuffer
   */
  createFramebuffer(A, e, t = {}) {
    return new x(this.gl, A, e, t);
  }
  /**
   * Fill the current framebuffer with a solid color (p5.js-like API)
   */
  background(A, e = A, t = A, B = 1) {
    this.clear(A / 255, e / 255, t / 255, B);
  }
  /**
   * Clear the current framebuffer
   */
  clear(A = 0, e = 0, t = 0, B = 0) {
    this.gl.clearColor(A, e, t, B), this.gl.clear(this.gl.COLOR_BUFFER_BIT);
  }
  /**
   * Ensure viewport matches canvas dimensions
   */
  resetViewport() {
    this.gl.viewport(0, 0, this.gl.canvas.width, this.gl.canvas.height);
  }
  /**
   * Get the WebGL context
   */
  get context() {
    return this.gl;
  }
  /**
   * Render a framebuffer at a specific position with optional scaling
   */
  image(A, e, t, B, r) {
    this.shader(this.imageShader), this.setUniform("u_texture", A.texture), this.rect(e, t, B ?? A.width, r ?? A.height);
  }
}
class G {
  constructor() {
    E(this, "bin");
    this.bin = this.createBinaryReader();
  }
  /**
   * Parse a font buffer and return font data
   */
  parse(A) {
    const e = new Uint8Array(A);
    let t = 0;
    if (this.bin.readASCII(e, t, 4) === "ttcf") {
      const r = this.bin.readUint(e, t + 8);
      t += 12;
      const Q = [];
      for (let g = 0; g < r; g++) {
        const i = this.bin.readUint(e, t);
        t += 4, Q.push(this.readFont(e, g, i));
      }
      return Q;
    } else
      return [this.readFont(e, 0, 0)];
  }
  /**
   * Find a table in the font data
   */
  findTable(A, e, t) {
    const B = this.bin.readUshort(A, t + 4);
    let r = t + 12;
    for (let Q = 0; Q < B; Q++) {
      const g = this.bin.readASCII(A, r, 4), i = this.bin.readUint(A, r + 8), s = this.bin.readUint(A, r + 12);
      if (g === e)
        return [i, s];
      r += 16;
    }
    return null;
  }
  /**
   * Read font data from buffer
   */
  readFont(A, e, t) {
    const B = {
      _data: A,
      _index: e,
      _offset: t
    }, r = /* @__PURE__ */ new Map(), Q = ["cmap", "head", "hhea", "maxp", "hmtx"];
    for (const g of Q) {
      const i = this.findTable(A, g, t);
      if (i) {
        const [s, n] = i;
        let o = r.get(s);
        o || (o = this.parseTable(g, A, s, n, B), r.set(s, o)), B[g] = o;
      }
    }
    return B;
  }
  /**
   * Parse a specific table
   */
  parseTable(A, e, t, B, r) {
    switch (A) {
      case "cmap":
        return this.parseCmapTable(e, t, B);
      case "head":
        return this.parseHeadTable(e, t, B);
      case "hhea":
        return this.parseHheaTable(e, t, B);
      case "hmtx":
        return this.parseHmtxTable(e, t, B, r);
      case "maxp":
        return this.parseMaxpTable(e, t, B);
      default:
        throw new Error(`Unknown table: ${A}`);
    }
  }
  /**
   * Parse cmap table
   */
  parseCmapTable(A, e, t) {
    const B = new Uint8Array(A.buffer, e, t);
    let r = 0;
    r += 2;
    const Q = this.bin.readUshort(B, r);
    r += 2;
    const g = {
      tables: [],
      ids: {},
      off: e
    }, i = /* @__PURE__ */ new Set();
    for (let s = 0; s < Q; s++) {
      const n = this.bin.readUshort(B, r);
      r += 2;
      const o = this.bin.readUshort(B, r);
      r += 2;
      const h = this.bin.readUint(B, r);
      r += 4;
      const c = `p${n}e${o}`;
      if (!i.has(h)) {
        const m = this.bin.readUshort(B, h), p = this.parseCmapSubtable(B, h, m);
        g.tables.push(p), i.add(h);
      }
      g.ids[c] = Array.from(i).indexOf(h);
    }
    return g;
  }
  /**
   * Parse cmap subtable based on format
   */
  parseCmapSubtable(A, e, t) {
    const B = { format: t };
    switch (t) {
      case 0:
        return this.parseCmapFormat0(A, e, B);
      case 4:
        return this.parseCmapFormat4(A, e, B);
      case 6:
        return this.parseCmapFormat6(A, e, B);
      case 12:
        return this.parseCmapFormat12(A, e, B);
      default:
        return B;
    }
  }
  /**
   * Parse cmap format 0
   */
  parseCmapFormat0(A, e, t) {
    let B = e + 2;
    const r = this.bin.readUshort(A, B);
    B += 2, B += 2, t.map = [];
    for (let Q = 0; Q < r - 6; Q++)
      t.map.push(A[B + Q]);
    return t;
  }
  /**
   * Parse cmap format 4
   */
  parseCmapFormat4(A, e, t) {
    const B = e;
    let r = e + 2;
    const Q = this.bin.readUshort(A, r);
    r += 2, r += 2;
    const g = this.bin.readUshort(A, r);
    r += 2;
    const i = g >>> 1;
    t.searchRange = this.bin.readUshort(A, r), r += 2, t.entrySelector = this.bin.readUshort(A, r), r += 2, t.rangeShift = this.bin.readUshort(A, r), r += 2, t.endCount = this.bin.readUshorts(A, r, i), r += i * 2, r += 2, t.startCount = this.bin.readUshorts(A, r, i), r += i * 2, t.idDelta = [];
    for (let s = 0; s < i; s++)
      t.idDelta.push(this.bin.readShort(A, r)), r += 2;
    return t.idRangeOffset = this.bin.readUshorts(A, r, i), r += i * 2, t.glyphIdArray = this.bin.readUshorts(A, r, B + Q - r >> 1), t;
  }
  /**
   * Parse cmap format 6
   */
  parseCmapFormat6(A, e, t) {
    let B = e + 2;
    B += 2, B += 2, t.firstCode = this.bin.readUshort(A, B), B += 2;
    const r = this.bin.readUshort(A, B);
    B += 2, t.glyphIdArray = [];
    for (let Q = 0; Q < r; Q++)
      t.glyphIdArray.push(this.bin.readUshort(A, B)), B += 2;
    return t;
  }
  /**
   * Parse cmap format 12
   */
  parseCmapFormat12(A, e, t) {
    let B = e + 4;
    B += 4, B += 4;
    const r = this.bin.readUint(A, B) * 3;
    B += 4, t.groups = new Uint32Array(r);
    for (let Q = 0; Q < r; Q += 3)
      t.groups[Q] = this.bin.readUint(A, B + (Q << 2)), t.groups[Q + 1] = this.bin.readUint(A, B + (Q << 2) + 4), t.groups[Q + 2] = this.bin.readUint(A, B + (Q << 2) + 8);
    return t;
  }
  /**
   * Parse head table
   */
  parseHeadTable(A, e, t) {
    let B = e;
    return B += 4, {
      fontRevision: this.bin.readFixed(A, B + 0),
      flags: this.bin.readUshort(A, B + 8),
      unitsPerEm: this.bin.readUshort(A, B + 10),
      created: this.bin.readUint64(A, B + 12),
      modified: this.bin.readUint64(A, B + 20),
      xMin: this.bin.readShort(A, B + 28),
      yMin: this.bin.readShort(A, B + 30),
      xMax: this.bin.readShort(A, B + 32),
      yMax: this.bin.readShort(A, B + 34),
      macStyle: this.bin.readUshort(A, B + 36),
      lowestRecPPEM: this.bin.readUshort(A, B + 38),
      fontDirectionHint: this.bin.readShort(A, B + 40),
      indexToLocFormat: this.bin.readShort(A, B + 42),
      glyphDataFormat: this.bin.readShort(A, B + 44)
    };
  }
  /**
   * Parse hhea table
   */
  parseHheaTable(A, e, t) {
    let B = e;
    B += 4;
    const r = [
      "ascender",
      "descender",
      "lineGap",
      "advanceWidthMax",
      "minLeftSideBearing",
      "minRightSideBearing",
      "xMaxExtent",
      "caretSlopeRise",
      "caretSlopeRun",
      "caretOffset",
      "res0",
      "res1",
      "res2",
      "res3",
      "metricDataFormat",
      "numberOfHMetrics"
    ], Q = {};
    for (let g = 0; g < r.length; g++) {
      const i = r[g], n = i === "advanceWidthMax" || i === "numberOfHMetrics" ? this.bin.readUshort : this.bin.readShort;
      Q[i] = n(A, B + g * 2);
    }
    return Q;
  }
  /**
   * Parse hmtx table
   */
  parseHmtxTable(A, e, t, B) {
    const r = B.maxp.numGlyphs, Q = B.hhea.numberOfHMetrics, g = [], i = [];
    let s = e, n = 0, o = 0;
    for (let h = 0; h < Q; h++)
      n = this.bin.readUshort(A, s), o = this.bin.readShort(A, s + 2), g.push(n), i.push(o), s += 4;
    for (let h = Q; h < r; h++)
      g.push(n), i.push(o);
    return { aWidth: g, lsBearing: i };
  }
  /**
   * Parse maxp table
   */
  parseMaxpTable(A, e, t) {
    let B = e;
    B += 4;
    const r = this.bin.readUshort(A, B);
    return B += 2, { numGlyphs: r };
  }
  /**
   * Create optimized binary reader
   */
  createBinaryReader() {
    const A = new ArrayBuffer(8), e = {
      buff: A,
      int8: new Int8Array(A),
      uint8: new Uint8Array(A),
      int16: new Int16Array(A),
      uint16: new Uint16Array(A),
      int32: new Int32Array(A),
      uint32: new Uint32Array(A)
    };
    return {
      readFixed: (t, B) => (t[B] << 8 | t[B + 1]) + (t[B + 2] << 8 | t[B + 3]) / (256 * 256 + 4),
      readInt: (t, B) => (e.uint8[0] = t[B + 3], e.uint8[1] = t[B + 2], e.uint8[2] = t[B + 1], e.uint8[3] = t[B], e.int32[0]),
      readShort: (t, B) => (e.uint16[0] = t[B] << 8 | t[B + 1], e.int16[0]),
      readUshort: (t, B) => t[B] << 8 | t[B + 1],
      readUshorts: (t, B, r) => {
        const Q = new Array(r);
        for (let g = 0; g < r; g++)
          Q[g] = t[B + g * 2] << 8 | t[B + g * 2 + 1];
        return Q;
      },
      readUint: (t, B) => (e.uint8[3] = t[B], e.uint8[2] = t[B + 1], e.uint8[1] = t[B + 2], e.uint8[0] = t[B + 3], e.uint32[0]),
      readUint64: (t, B) => {
        const r = e.uint32[0] = t[B] << 24 | t[B + 1] << 16 | t[B + 2] << 8 | t[B + 3], Q = e.uint32[0] = t[B + 4] << 24 | t[B + 5] << 16 | t[B + 6] << 8 | t[B + 7];
        return r * 4294967296 + Q;
      },
      readASCII: (t, B, r) => {
        let Q = "";
        for (let g = 0; g < r; g++)
          Q += String.fromCharCode(t[B + g]);
        return Q;
      },
      t: e
    };
  }
}
const f = new G(), w = {
  parse: (a) => f.parse(a),
  findTable: (a, A, e) => f.findTable(a, A, e)
}, M = `data:font/truetype;charset=utf-8;base64,r
`;
class C extends Error {
  constructor(e, t, B = {}) {
    const r = C.createFormattedMessage(e, B);
    super(r);
    E(this, "originalError");
    E(this, "context");
    this.name = "TextmodeError", this.originalError = t, this.context = B;
  }
  /**
   * Create a formatted error message that includes context
   */
  static createFormattedMessage(e, t) {
    let B = e;
    if (t && Object.keys(t).length > 0) {
      B += `

📋 Context:`;
      for (const [r, Q] of Object.entries(t)) {
        const g = C.formatValue(Q);
        B += `
  - ${r}: ${g}`;
      }
    }
    return B += `

`, B += "↓".repeat(24) + `
`, B;
  }
  /**
   * Format values for better display in error messages
   */
  static formatValue(e) {
    if (e === null) return "null";
    if (e === void 0) return "undefined";
    if (typeof e == "string") return `"${e}"`;
    if (typeof e == "number" || typeof e == "boolean") return String(e);
    if (Array.isArray(e))
      return e.length === 0 ? "[]" : e.length <= 5 ? `[${e.map((t) => C.formatValue(t)).join(", ")}]` : `[${e.slice(0, 3).map((t) => C.formatValue(t)).join(", ")}, ... +${e.length - 3} more]`;
    if (typeof e == "object") {
      const t = Object.keys(e);
      return t.length === 0 ? "{}" : t.length <= 3 ? `{ ${t.map((Q) => `${Q}: ${C.formatValue(e[Q])}`).join(", ")} }` : `{ ${t.slice(0, 2).map((r) => `${r}: ${C.formatValue(e[r])}`).join(", ")}, ... +${t.length - 2} more }`;
    }
    return String(e);
  }
}
var U = /* @__PURE__ */ ((a) => (a[a.SILENT = 0] = "SILENT", a[a.WARNING = 1] = "WARNING", a[a.ERROR = 2] = "ERROR", a[a.THROW = 3] = "THROW", a))(U || {});
const l = class l {
  constructor() {
    E(this, "_options", {
      globalLevel: 3
      /* THROW */
    });
  }
  static getInstance() {
    return l._instance || (l._instance = new l()), l._instance;
  }
  /**
   * Handle an error based on the configured settings
   * @returns true if execution should continue, false if error was handled
   */
  _handle(A, e, t) {
    const B = "[textmode.js]";
    switch (this._options.globalLevel) {
      case 0:
        return !1;
      // Validation failed, handled silently
      case 1:
        return console.group(
          `%c${B} 💥 Oops! Something went wrong in your code.`,
          "color: #f44336; font-weight: bold; background: #ffebee; padding: 2px 6px; border-radius: 3px;"
        ), console.warn(C.createFormattedMessage(A, e)), console.groupEnd(), !1;
      case 2:
        return console.group(
          `%c${B} 💥 Oops! Something went wrong in your code.`,
          "color: #f44336; font-weight: bold; background: #ffebee; padding: 2px 6px; border-radius: 3px;"
        ), console.error(C.createFormattedMessage(A, e)), console.groupEnd(), !1;
      case 3:
      default:
        const r = new C(A, t, e);
        throw console.group(
          `%c${B} 💥 Oops! Something went wrong in your code.`,
          "color: #d32f2f; font-weight: bold; background: #ffcdd2; padding: 2px 6px; border-radius: 3px;"
        ), r;
    }
  }
  /**
   * Validate a condition and handle errors if validation fails
   * @param condition The condition to validate
   * @param message Error message if validation fails
   * @param context Additional context for debugging
   * @returns true if validation passed, false if validation failed and was handled
   */
  validate(A, e, t) {
    return A ? !0 : (this._handle(e, t), !1);
  }
  /**
   * Set global error level
   */
  setGlobalLevel(A) {
    this._options.globalLevel = A;
  }
};
E(l, "_instance", null);
let I = l;
const D = I.getInstance();
class T {
  /**
   * Creates a new FontManager instance 
   * @param renderer Renderer instance for texture creation
   * @param fontSize Font size to use for the texture atlas
   * @ignore
   */
  constructor(A, e = 16) {
    E(this, "_font");
    E(this, "_characters", []);
    E(this, "_fontFramebuffer");
    E(this, "_textureCanvas");
    E(this, "_textureContext");
    E(this, "_fontSize", 16);
    E(this, "_textureColumns", 0);
    E(this, "_textureRows", 0);
    E(this, "_maxGlyphDimensions", { width: 0, height: 0 });
    E(this, "_renderer");
    E(this, "_fontFace");
    E(this, "_fontFamilyName", "UrsaFont");
    this._renderer = A, this._fontSize = e, this._textureCanvas = document.createElement("canvas"), this._textureContext = this._textureCanvas.getContext("2d");
  }
  /**
   * Initializes the font manager by loading the font and creating the texture atlas
   * @returns Promise that resolves when initialization is complete
   * @ignore
   */
  async initialize() {
    const e = await (await fetch(M)).arrayBuffer();
    this._fontFace = new FontFace(this._fontFamilyName, e), await this._fontFace.load(), document.fonts.add(this._fontFace), this._font = w.parse(e)[0], this._initializeCharacters(), this._calculateMaxGlyphDimensions(), await this._createTextureAtlas();
  }
  /**
   * Initializes the characters array from the font's cmap table
   */
  _initializeCharacters() {
    const A = [], e = /* @__PURE__ */ new Map();
    this._font && this._font.cmap && this._font.cmap.tables && this._font.cmap.tables.forEach((r) => {
      if (r.format === 4 && r.startCount && r.endCount && r.idRangeOffset && r.idDelta)
        for (let Q = 0; Q < r.startCount.length; Q++) {
          const g = r.startCount[Q], i = r.endCount[Q];
          if (!(g === 65535 && i === 65535))
            for (let s = g; s <= i; s++) {
              const n = String.fromCodePoint(s);
              let o = 0;
              if (r.idRangeOffset[Q] === 0)
                o = s + r.idDelta[Q] & 65535;
              else {
                const h = r.idRangeOffset[Q] / 2 + (s - r.startCount[Q]) - (r.startCount.length - Q);
                if (h >= 0 && r.glyphIdArray && h < r.glyphIdArray.length) {
                  const c = r.glyphIdArray[h];
                  c !== 0 && (o = c + r.idDelta[Q] & 65535);
                }
              }
              o && o > 0 && (A.push(n), e.set(n, o));
            }
        }
      else if (r.format === 12 && r.groups)
        for (let Q = 0; Q < r.groups.length; Q += 3) {
          const g = r.groups[Q], i = r.groups[Q + 1], s = r.groups[Q + 2];
          for (let n = g; n <= i; n++) {
            const o = String.fromCodePoint(n), h = s + (n - g);
            h > 0 && (A.push(o), e.set(o, h));
          }
        }
    });
    const B = [...new Set(A)].filter((r) => {
      const Q = r.codePointAt(0) || 0;
      return !(Q >= 0 && Q <= 31 && Q !== 9 && Q !== 10 && Q !== 13 || Q >= 127 && Q <= 159);
    });
    this._characters = B.map((r, Q) => {
      const g = r.codePointAt(0) || 0, i = Q % 256, s = Math.floor(Q / 256) % 256, n = Math.floor(Q / 65536) % 256;
      return {
        character: r,
        unicode: g,
        color: [i, s, n]
      };
    });
  }
  /**
   * Calculates the maximum glyph dimensions for the given font size
   */
  _calculateMaxGlyphDimensions() {
    if (this._fontFace && this._fontFace.status !== "loaded") {
      this._maxGlyphDimensions = { width: this._fontSize, height: this._fontSize };
      return;
    }
    this._textureContext.font = `${this._fontSize}px ${this._fontFamilyName}`;
    let A = 0, e = 0;
    for (const { character: t } of this._characters) {
      const B = this._textureContext.measureText(t), r = B.width, Q = B.actualBoundingBoxAscent !== void 0 && B.actualBoundingBoxDescent !== void 0 ? B.actualBoundingBoxAscent + B.actualBoundingBoxDescent : this._fontSize;
      r > 0 && (A = Math.max(A, r), e = Math.max(e, Q));
    }
    this._maxGlyphDimensions = {
      width: Math.ceil(A),
      height: Math.ceil(e)
    };
  }
  /**
   * Creates the texture atlas containing all characters
   */
  async _createTextureAtlas() {
    const A = this._characters.length;
    this._textureColumns = Math.ceil(Math.sqrt(A)), this._textureRows = Math.ceil(A / this._textureColumns);
    const e = this._maxGlyphDimensions.width * this._textureColumns, t = this._maxGlyphDimensions.height * this._textureRows;
    this._textureCanvas.width = e, this._textureCanvas.height = t, this._textureCanvas.style.imageRendering = "pixelated", this._textureContext.imageSmoothingEnabled = !1, this._textureContext.fillStyle = "black", this._textureContext.fillRect(0, 0, e, t), this._textureContext.font = `${this._fontSize}px ${this._fontFamilyName}`, this._textureContext.textBaseline = "top", this._textureContext.textAlign = "left", this._textureContext.fillStyle = "white";
    for (let B = 0; B < this._characters.length; B++) {
      const r = B % this._textureColumns, Q = Math.floor(B / this._textureColumns), g = r * this._maxGlyphDimensions.width + this._maxGlyphDimensions.width / 2, i = Q * this._maxGlyphDimensions.height + this._maxGlyphDimensions.height / 2, s = this._characters[B].character, n = g - this.maxGlyphDimensions.width / 2, o = i - this._fontSize / 2;
      this._textureContext.fillText(s, n, o);
    }
    this._fontFramebuffer = this._renderer.createFramebuffer(this._textureCanvas.width, this._textureCanvas.height), this._fontFramebuffer.update(this._textureCanvas);
  }
  /**
   * Get the color associated with a character.
   * @param character The character to get the color for.
   * @returns The RGB color as an array `[r, g, b]`.
   */
  getCharacterColor(A) {
    if (!D.validate(
      typeof A == "string" && A.length === 1,
      "Character must be a single character string.",
      { providedValue: A, method: "getCharacterColor" }
    ))
      return [0, 0, 0];
    const t = this._characters.find((B) => B.character === A);
    return t ? t.color : [0, 0, 0];
  }
  /**
   * Get the colors associated with a string of characters.
   * @param characters The string of characters to get colors for.
   * @returns An array of RGB colors for each character in the string.
   * Each color is represented as an array `[r, g, b]`.
   */
  getCharacterColors(A) {
    return D.validate(
      typeof A == "string" && A.length > 0,
      "Characters must be a string with at least one character.",
      { providedValue: A, method: "getCharacterColors" }
    ) ? A.split("").map((t) => this.getCharacterColor(t) || [0, 0, 0]) : [[0, 0, 0]];
  }
  /**
   * Checks if all characters in the given string exist in the font.
   * @param str The string to check.
   * @returns `true` if all characters exist in the font, `false` otherwise.
   */
  hasAllCharacters(A) {
    if (typeof A != "string" || A.length === 0) return !1;
    const e = new Set(this._characters.map((t) => t.character));
    for (const t of A)
      if (!e.has(t)) return !1;
    return !0;
  }
  /**
   * Updates the font by loading a new font file and regenerating all related properties
   * @param fontPath Path to the .otf or .ttf font file
   * @param fontSize Optional new font size (defaults to current fontSize)
   * @returns Promise that resolves when font update is complete
   * @ignore
   */
  async loadFont(A) {
    try {
      const e = await fetch(A);
      if (!e.ok)
        throw new C(`Failed to load font file: ${e.status} ${e.statusText}`);
      const t = await e.arrayBuffer(), B = Date.now();
      this._fontFamilyName = `CustomFont_${B}`, this._fontFace = new FontFace(this._fontFamilyName, t), await this._fontFace.load(), document.fonts.add(this._fontFace);
      const r = w.parse(t);
      if (!r || r.length === 0)
        throw new Error("Failed to parse font file");
      this._font = r[0], this._initializeCharacters(), this._calculateMaxGlyphDimensions(), await this._createTextureAtlas();
    } catch (e) {
      throw new C(`Failed to load font: ${e instanceof Error ? e.message : "Unknown error"}`, e);
    }
  }
  /** 
   * Returns the WebGL framebuffer containing the font texture atlas. 
   * @ignore
   */
  get fontFramebuffer() {
    return this._fontFramebuffer;
  }
  /** Returns the array of {@link TextmodeCharacter} objects in the font. */
  get characters() {
    return this._characters;
  }
  /** Returns a string representation of all characters in the font.*/
  get charactersString() {
    return this._characters.map((A) => A.character).join("");
  }
  /** Returns the number of columns in the texture atlas.*/
  get textureColumns() {
    return this._textureColumns;
  }
  /** Returns the number of rows in the texture atlas. */
  get textureRows() {
    return this._textureRows;
  }
  /** Returns the maximum dimensions of a glyph in the font. */
  get maxGlyphDimensions() {
    return this._maxGlyphDimensions;
  }
  /** Returns the font size used for rendering. */
  get fontSize() {
    return this._fontSize;
  }
}
class Y {
  /**
   * Create a new grid instance.
   * @param canvas The canvas element used to determine the grid dimensions.
   * @param cellWidth The width of each cell in the grid.
   * @param cellHeight The height of each cell in the grid.
   * @ignore
   */
  constructor(A, e, t) {
    /** The number of columns in the grid. */
    E(this, "_cols");
    /** The number of rows in the grid. */
    E(this, "_rows");
    /** The total width of the grid in pixels. */
    E(this, "_width");
    /** The total height of the grid in pixels. */
    E(this, "_height");
    /** The offset to the outer canvas on the x-axis when centering the grid. */
    E(this, "_offsetX");
    /** The offset to the outer canvas on the y-axis when centering the grid. */
    E(this, "_offsetY");
    /** Whether the grid dimensions are fixed, or responsive based on the canvas dimensions. */
    E(this, "_fixedDimensions", !1);
    /** The canvas element used to determine the grid dimensions. */
    E(this, "_canvas");
    /** The width of each cell in the grid. */
    E(this, "_cellWidth");
    /** The height of each cell in the grid. */
    E(this, "_cellHeight");
    this._canvas = A, this._cellWidth = e, this._cellHeight = t, this.reset();
  }
  /**
   * Reset the grid to the default number of columns and rows based on the current canvas dimensions, and the grid cell dimensions.
   * @ignore
   */
  reset() {
    this._fixedDimensions || ([this._cols, this._rows] = [Math.floor(this._canvas.width / this._cellWidth), Math.floor(this._canvas.height / this._cellHeight)]), this._resizeGrid();
  }
  /**
   * Reset the total grid width & height, and the offset to the outer canvas.
   */
  _resizeGrid() {
    this._width = this._cols * this._cellWidth, this._height = this._rows * this._cellHeight, this._offsetX = Math.floor((this._canvas.width - this._width) / 2), this._offsetY = Math.floor((this._canvas.height - this._height) / 2);
  }
  /**
   * Re-assign the grid cell dimensions and `reset()` the grid.
   * @param newCellWidth The new cell width.
   * @param newCellHeight The new cell height.
   * @ignore
   */
  resizeCellPixelDimensions(A, e) {
    [this._cellWidth, this._cellHeight] = [A, e], this.reset();
  }
  /**
   * Re-assign the grid dimensions and resize the grid. 
   * 
   * Calling this method makes the grid dimensions fixed, meaning they will not automatically resize based on the canvas dimensions.
   * @param newCols The new number of columns.
   * @param newRows The new number of rows.
   * @ignore
   */
  resizeGridDimensions(A, e) {
    this._fixedDimensions = !0, [this._cols, this._rows] = [A, e], this._resizeGrid();
  }
  /**
   * Make the grid dimensions flexible again, and `reset()` the grid.
   * @ignore
   */
  resetGridDimensions() {
    this._fixedDimensions = !1, this.reset();
  }
  /**
   * Update the canvas used by the grid, and reset the grid dimensions.
   * @param canvas The new canvas element to use for the grid.
   * @ignore
   */
  updateCanvas(A) {
    this._canvas = A, this._fixedDimensions ? this._resizeGrid() : this.reset();
  }
  /**
   * Returns the width of each cell in the grid.
   */
  get cellWidth() {
    return this._cellWidth;
  }
  /**
   * Returns the height of each cell in the grid.
   */
  get cellHeight() {
    return this._cellHeight;
  }
  /**
   * Returns the number of columns in the grid.
   */
  get cols() {
    return this._cols;
  }
  /**
   * Returns the number of rows in the grid.
   */
  get rows() {
    return this._rows;
  }
  /**
   * Returns the total width of the grid.
   */
  get width() {
    return this._width;
  }
  /**
   * Returns the total height of the grid.
   */
  get height() {
    return this._height;
  }
  /**
   * Returns the offset to the outer canvas borders on the x-axis when centering the grid.
   */
  get offsetX() {
    return this._offsetX;
  }
  /**
   * Returns the offset to the outer canvas borders on the y-axis when centering the grid.
   */
  get offsetY() {
    return this._offsetY;
  }
  /** 
   * Returns `true` if the grid dimensions *(columns and rows)* are fixed, or `false` if they are responsive based on the canvas dimensions.
   */
  get fixedDimensions() {
    return this._fixedDimensions;
  }
  /**
   * Sets whether the grid dimensions *(columns and rows)* are fixed or responsive based on the canvas dimensions.
   * @param value `true` to make the grid dimensions fixed, or `false` to make them responsive.
   * @ignore
   */
  set fixedDimensions(A) {
    this._fixedDimensions = A;
  }
}
class R {
  constructor(A) {
    E(this, "webglCanvas");
    E(this, "captureCanvas");
    this.captureCanvas = A, this.webglCanvas = this.createOverlayCanvas();
  }
  generateUniqueCanvasId() {
    let A = 0, e = `textmodeCanvas${A}`;
    for (; document.getElementById(e); )
      A++, e = `textmodeCanvas${A}`;
    return e;
  }
  createOverlayCanvas() {
    var r;
    const A = document.createElement("canvas");
    A.width = this.captureCanvas.width, A.height = this.captureCanvas.height, A.className = "textmodeCanvas", A.id = this.generateUniqueCanvasId(), A.style.position = "absolute", A.style.pointerEvents = "none";
    const e = window.getComputedStyle(this.captureCanvas);
    let t = parseInt(e.zIndex || "0", 10);
    isNaN(t) && (t = 0), A.style.zIndex = (t + 1).toString();
    const B = this.captureCanvas.getBoundingClientRect();
    return A.style.width = B.width + "px", A.style.height = B.height + "px", this.positionOverlayCanvas(A), (r = this.captureCanvas.parentNode) == null || r.insertBefore(A, this.captureCanvas.nextSibling), A;
  }
  positionOverlayCanvas(A) {
    const e = this.captureCanvas.getBoundingClientRect();
    let t = this.captureCanvas.offsetParent;
    if (t && t !== document.body) {
      const B = t.getBoundingClientRect();
      A.style.top = e.top - B.top + "px", A.style.left = e.left - B.left + "px";
    } else
      A.style.top = e.top + window.scrollY + "px", A.style.left = e.left + window.scrollX + "px";
  }
  resize() {
    this.webglCanvas.width = this.captureCanvas.width, this.webglCanvas.height = this.captureCanvas.height;
    const A = this.captureCanvas.getBoundingClientRect();
    this.webglCanvas.style.width = A.width + "px", this.webglCanvas.style.height = A.height + "px", this.positionOverlayCanvas(this.webglCanvas);
  }
  /**
   * Get the WebGL context for the overlay canvas
   */
  getWebGLContext() {
    const A = { alpha: !0, premultipliedAlpha: !1, preserveDrawingBuffer: !0 }, e = this.webglCanvas.getContext("webgl2", A) || this.webglCanvas.getContext("webgl", A);
    if (!e)
      throw new C("WebGL context could not be created. Ensure your browser supports WebGL.");
    return e;
  }
  // Getters
  get canvas() {
    return this.webglCanvas;
  }
  get width() {
    return this.webglCanvas.width;
  }
  get height() {
    return this.webglCanvas.height;
  }
}
var S = "precision lowp float;uniform sampler2D u_characterTexture;uniform vec2 u_charsetDimensions;uniform sampler2D u_asciiCharacterTexture;uniform sampler2D u_primaryColorTexture;uniform sampler2D u_secondaryColorTexture;uniform sampler2D u_transformTexture;uniform sampler2D u_rotationTexture;uniform sampler2D u_captureTexture;uniform vec2 u_captureDimensions;uniform int u_backgroundMode;uniform vec2 u_gridCellDimensions;uniform vec2 u_gridPixelDimensions;uniform float u_pixelRatio;varying vec2 v_uv;mat2 rotate2D(float a){float s=sin(a),c=cos(a);return mat2(c,-s,s,c);}void main(){vec2 screen=v_uv*u_captureDimensions;vec2 cellSize=u_gridPixelDimensions/u_gridCellDimensions;vec2 cell=floor(screen/cellSize);vec2 frac=fract(screen/cellSize);vec2 charUV=(cell+0.5)/u_gridCellDimensions;vec4 charMap=texture2D(u_asciiCharacterTexture,charUV);if(charMap.a<0.01){gl_FragColor=u_backgroundMode==0? vec4(0,0,0,1): texture2D(u_captureTexture,v_uv);return;}vec4 fg=texture2D(u_primaryColorTexture,charUV);vec4 bg=texture2D(u_secondaryColorTexture,charUV);vec4 tf=texture2D(u_transformTexture,charUV);bool inv=tf.r>0.5,flipX=tf.g>0.5,flipY=tf.b>0.5;int idx=int(charMap.r*255.0+0.5)+int(charMap.g*255.0+0.5)*256;int col=int(mod(float(idx),u_charsetDimensions.x));int row=idx/int(u_charsetDimensions.x);vec2 base=vec2(float(col),float(row))/u_charsetDimensions;vec2 cellSz=1.0/u_charsetDimensions;vec2 f=frac;if(flipX)f.x=1.0-f.x;if(flipY)f.y=1.0-f.y;vec4 rot=texture2D(u_rotationTexture,charUV);float angle=((rot.r*255.0+rot.g)*360.0)/255.0*0.01745329252;if(abs(angle)>0.01){f=rotate2D(angle)*(f-0.5)+0.5;}if(f.x<0.0||f.x>1.0||f.y<0.0||f.y>1.0){gl_FragColor=inv ? fg : bg;return;}vec4 charTex=texture2D(u_characterTexture,base+f*cellSz);gl_FragColor=charTex.r>0.5? vec4(inv ? bg.rgb : fg.rgb,1.0): vec4(inv ? fg.rgb : bg.rgb,1.0);}", O = "precision lowp float;uniform sampler2D u_sketchTexture;uniform vec2 u_gridCellDimensions;void main(){vec2 cell=floor(gl_FragCoord.xy);vec2 texel=(cell+0.5)/u_gridCellDimensions;gl_FragColor=texture2D(u_sketchTexture,texel);}", z = "precision lowp float;uniform sampler2D u_colorSampleFramebuffer;uniform sampler2D u_charPaletteTexture;uniform vec2 u_charPaletteSize;uniform vec2 u_textureSize;uniform vec2 u_brightnessRange;void main(){vec2 uv=(floor(gl_FragCoord.xy)+0.5)/u_textureSize;vec4 color=texture2D(u_colorSampleFramebuffer,uv);if(color.a==0.0){gl_FragColor=vec4(0.0);return;}float brightness=dot(color.rgb,vec3(0.299,0.587,0.114))*255.0;if(brightness<u_brightnessRange.x||brightness>u_brightnessRange.y){gl_FragColor=vec4(0.0);return;}float t=(brightness-u_brightnessRange.x)/(u_brightnessRange.y-u_brightnessRange.x);float idx=clamp(floor(t*u_charPaletteSize.x),0.0,u_charPaletteSize.x-1.0);float u=(idx+0.5)/u_charPaletteSize.x;vec3 charColor=texture2D(u_charPaletteTexture,vec2(u,0.0)).rgb;gl_FragColor=vec4(charColor,color.a);}";
class H {
  /**
   * Create a new color palette instance.
   * @param renderer The renderer instance.
   * @param colors The RGB colors to store as [r, g, b] arrays where values are 0-255.
   */
  constructor(A, e) {
    /** The framebuffer used to store the color palette. */
    E(this, "_framebuffer");
    E(this, "_renderer");
    E(this, "_colors");
    this._renderer = A, this._colors = e;
    const t = Math.max(this._colors.length, 1);
    this._framebuffer = this._renderer.createFramebuffer(t, 1, {
      filter: "nearest",
      wrap: "clamp",
      format: "rgba"
    }), this._updateFramebuffer();
  }
  /**
   * Update the framebuffer with the currently selected colors.
   */
  _updateFramebuffer() {
    if (!this._framebuffer || !this._renderer) return;
    const A = Math.max(this._colors.length, 1), e = 1;
    this._framebuffer.width !== A && this._framebuffer.resize(A, e);
    const t = new Uint8Array(A * e * 4);
    for (let r = 0; r < A; r++) {
      const Q = r < this._colors.length ? this._colors[r] : [0, 0, 0], g = r * 4;
      t[g] = Q[0], t[g + 1] = Q[1], t[g + 2] = Q[2], t[g + 3] = 255;
    }
    const B = this._renderer.context;
    B.bindTexture(B.TEXTURE_2D, this._framebuffer.texture), B.texImage2D(
      B.TEXTURE_2D,
      0,
      B.RGBA,
      A,
      e,
      0,
      B.RGBA,
      B.UNSIGNED_BYTE,
      t
    ), B.bindTexture(B.TEXTURE_2D, null);
  }
  /**
   * Sets the colors of the palette and updates the framebuffer.
   * @param newColors The new RGB colors to set as [r, g, b] arrays.
   */
  setColors(A) {
    this._colors = A, this._updateFramebuffer();
  }
  /**
   * Get the colors of the palette.
   */
  get colors() {
    return this._colors;
  }
  /**
   * Get the framebuffer containing the colors of the palette.
   */
  get framebuffer() {
    return this._framebuffer;
  }
  /**
   * Get the texture from the framebuffer for use in shaders.
   */
  get texture() {
    return this._framebuffer.texture;
  }
}
class V {
  constructor(A, e, t, B = {}) {
    E(this, "renderer");
    E(this, "fontManager");
    E(this, "grid");
    E(this, "_characterFramebuffer");
    E(this, "_primaryColorFramebuffer");
    E(this, "_secondaryColorFramebuffer");
    E(this, "_rotationFramebuffer");
    E(this, "_transformFramebuffer");
    E(this, "palette");
    E(this, "options");
    this.renderer = A, this.fontManager = e, this.grid = t, this.options = B, this._characterFramebuffer = this.renderer.createFramebuffer(this.grid.cols, this.grid.rows), this._primaryColorFramebuffer = this.renderer.createFramebuffer(this.grid.cols, this.grid.rows), this._secondaryColorFramebuffer = this.renderer.createFramebuffer(this.grid.cols, this.grid.rows), this._rotationFramebuffer = this.renderer.createFramebuffer(this.grid.cols, this.grid.rows), this._transformFramebuffer = this.renderer.createFramebuffer(this.grid.cols, this.grid.rows), this.palette = new H(this.renderer, this.fontManager.getCharacterColors("0123456789"));
  }
  resize() {
    this._characterFramebuffer.resize(this.grid.cols, this.grid.rows), this._primaryColorFramebuffer.resize(this.grid.cols, this.grid.rows), this._secondaryColorFramebuffer.resize(this.grid.cols, this.grid.rows), this._rotationFramebuffer.resize(this.grid.cols, this.grid.rows), this._transformFramebuffer.resize(this.grid.cols, this.grid.rows);
  }
  characters(A) {
    D.validate(
      this.fontManager.hasAllCharacters(A),
      "One or more characters do not exist in the current font.",
      { method: "characters", providedValue: A }
    ) && (this.options.characters = A, this.palette.setColors(this.fontManager.getCharacterColors(A)));
  }
  characterColor(A, e = A, t = A, B = 255) {
    D.validate(
      [A, e, t, B].every((r) => r >= 0 && r <= 255),
      "Character color values must be between 0 and 255",
      { method: "characterColor", providedValues: { r: A, g: e, b: t, a: B } }
    ) && (this.options.characterColor = [A, e, t, B]);
  }
  characterColorMode(A) {
    D.validate(
      ["sampled", "fixed"].includes(A),
      "Invalid character color mode. Must be 'sampled' or 'fixed'.",
      { method: "characterColorMode", providedValue: A }
    ) && (this.options.characterColorMode = A);
  }
  backgroundColor(A, e = A, t = A, B = 255) {
    D.validate(
      [A, e, t, B].every((r) => r >= 0 && r <= 255),
      "Background color values must be between 0 and 255",
      { method: "backgroundColor", providedValues: { r: A, g: e, b: t, a: B } }
    ) && (this.options.backgroundColor = [A, e, t, B]);
  }
  backgroundColorMode(A) {
    D.validate(
      ["sampled", "fixed"].includes(A),
      "Invalid background color mode. Must be 'sampled' or 'fixed'.",
      { method: "backgroundColorMode", providedValue: A }
    ) && (this.options.backgroundColorMode = A);
  }
  invert(A) {
    D.validate(
      typeof A == "boolean" || typeof A == "number" && Number.isInteger(A),
      "Invert must be a boolean value or an integer (0 for false, any other number for true).",
      { method: "invert", providedValue: A }
    ) && (this.options.invert = !!A);
  }
  rotation(A) {
    D.validate(
      typeof A == "number",
      "Rotation angle must be a number.",
      { method: "rotation", providedValue: A }
    ) && (this.options.rotation = A);
  }
  flipHorizontally(A) {
    D.validate(
      typeof A == "boolean" || typeof A == "number" && Number.isInteger(A),
      "Flip horizontally must be a boolean value or an integer (0 for false, any other number for true).",
      { method: "flipHorizontally", providedValue: A }
    ) && (this.options.flipHorizontally = !!A);
  }
  flipVertically(A) {
    D.validate(
      typeof A == "boolean" || typeof A == "number" && Number.isInteger(A),
      "Flip vertically must be a boolean value or an integer (0 for false, any other number for true).",
      { method: "flipVertically", providedValue: A }
    ) && (this.options.flipVertically = !!A);
  }
  get characterFramebuffer() {
    return this._characterFramebuffer;
  }
  get primaryColorFramebuffer() {
    return this._primaryColorFramebuffer;
  }
  get secondaryColorFramebuffer() {
    return this._secondaryColorFramebuffer;
  }
  get rotationFramebuffer() {
    return this._rotationFramebuffer;
  }
  get transformFramebuffer() {
    return this._transformFramebuffer;
  }
}
const k = {
  /** Enable/disable the renderer */
  enabled: !0,
  /** Characters used for brightness mapping (from darkest to brightest) */
  characters: " .:-=+*%@#",
  /** Color of the ASCII characters. Only used when `characterColorMode` is set to `fixed` */
  characterColor: [255, 255, 255, 255],
  /** Character color mode */
  characterColorMode: "sampled",
  /** Cell background color. Only used when `characterColorMode` is set to `fixed` */
  backgroundColor: [0, 0, 0, 255],
  /** Background color mode */
  backgroundColorMode: "fixed",
  /** Swap the cells ASCII character colors with it's cell background colors */
  invert: !1,
  /** Rotation angle of all characters in the grid in degrees */
  rotation: 0,
  /** Flip the ASCII characters horizontally */
  flipHorizontally: !1,
  /** Flip the ASCII characters vertically */
  flipVertically: !1,
  /** Range of brightness values to map to ASCII characters */
  brightnessRange: [0, 255]
};
class L extends V {
  constructor(e, t, B) {
    super(e, t, B, { ...k });
    E(this, "sampleShader");
    E(this, "charMappingShader");
    E(this, "sampleFramebuffer");
    this.sampleShader = new P(e.context, u, O), this.charMappingShader = new P(e.context, u, z), this.sampleFramebuffer = this.renderer.createFramebuffer(this.grid.cols, this.grid.rows);
  }
  convert(e) {
    this.sampleFramebuffer.begin(), this.renderer.clear(0, 0, 0, 0), this.renderer.shader(this.sampleShader), this.renderer.setUniform("u_sketchTexture", e), this.renderer.setUniform("u_gridCellDimensions", [this.grid.cols, this.grid.rows]), this.renderer.rect(0, 0, this.grid.cols, this.grid.rows), this.sampleFramebuffer.end(), this._primaryColorFramebuffer.begin(), this.options.characterColorMode === "fixed" ? this.renderer.background(this.options.characterColor[0], this.options.characterColor[1], this.options.characterColor[2], this.options.characterColor[3]) : (this.renderer.clear(0, 0, 0, 0), this.renderer.image(this.sampleFramebuffer, 0, 0, this.grid.cols, this.grid.rows)), this._primaryColorFramebuffer.end(), this._secondaryColorFramebuffer.begin(), this.options.backgroundColorMode === "fixed" ? this.renderer.background(this.options.backgroundColor[0], this.options.backgroundColor[1], this.options.backgroundColor[2], this.options.backgroundColor[3]) : (this.renderer.clear(0, 0, 0, 0), this.renderer.image(this.sampleFramebuffer, 0, 0, this.grid.cols, this.grid.rows)), this._secondaryColorFramebuffer.end(), this._transformFramebuffer.begin(), this.renderer.background(
      this.options.invert ? 255 : 0,
      this.options.flipHorizontally ? 255 : 0,
      this.options.flipVertically ? 255 : 0
    ), this._transformFramebuffer.end(), this._rotationFramebuffer.begin(), this.renderer.background(this.options.rotation, this.options.rotation, this.options.rotation), this._rotationFramebuffer.end(), this._characterFramebuffer.begin(), this.renderer.clear(0, 0, 0, 0), this.renderer.shader(this.charMappingShader), this.renderer.setUniform("u_colorSampleFramebuffer", this.sampleFramebuffer.texture), this.renderer.setUniform("u_charPaletteTexture", this.palette.texture), this.renderer.setUniform("u_charPaletteSize", [this.palette.colors.length, 1]), this.renderer.setUniform("u_textureSize", [this.grid.cols, this.grid.rows]), this.renderer.setUniform("u_brightnessRange", this.options.brightnessRange), this.renderer.rect(0, 0, this.grid.cols, this.grid.rows), this._characterFramebuffer.end();
  }
  resize() {
    super.resize(), this.sampleFramebuffer.resize(this.grid.cols, this.grid.rows);
  }
  brightnessRange(e) {
    D.validate(
      Array.isArray(e) && e.length === 2 && e.every((t) => typeof t == "number" && t >= 0 && t <= 255),
      "Brightness range must be an array of two numbers between 0 and 255.",
      { method: "brightnessRange", providedValue: e }
    ) && (this.options.brightnessRange = e);
  }
}
class d {
  constructor(A, e = {}) {
    /** The canvas element to capture content from */
    E(this, "captureCanvas");
    /** Our WebGL overlay canvas manager */
    E(this, "textmodeCanvas");
    /** Core WebGL renderer */
    E(this, "renderer");
    E(this, "asciiShader");
    E(this, "canvasFramebuffer");
    E(this, "brightnessConverter");
    E(this, "_fontManager");
    E(this, "_grid");
    E(this, "resizeObserver");
    E(this, "resultFramebuffer");
    this.captureCanvas = A, this.textmodeCanvas = new R(A);
    const t = this.textmodeCanvas.getWebGLContext();
    this.renderer = new y(t), this.asciiShader = new P(t, u, S), this.canvasFramebuffer = this.renderer.createFramebuffer(A.width, A.height), this._fontManager = new T(this.renderer, e.fontSize ?? 16);
  }
  /**
   * Static factory method for creating and initializing a Textmodifier instance.
   * @param canvas The HTML canvas element to capture content from.
   * @param opts Optional configuration options for the `Textmodifier` instance.
   */
  static async create(A, e = {}) {
    const t = new d(A, e);
    await t._fontManager.initialize();
    const B = t._fontManager.maxGlyphDimensions;
    return t._grid = new Y(t.captureCanvas, B.width, B.height), t.brightnessConverter = new L(t.renderer, t._fontManager, t._grid), t.resultFramebuffer = t.renderer.createFramebuffer(t._grid.width, t._grid.height), t.setupEventListeners(), t;
  }
  setupEventListeners() {
    window.addEventListener("resize", this.resize.bind(this)), window.ResizeObserver && (this.resizeObserver = new ResizeObserver(() => {
      this.resize();
    }), this.resizeObserver.observe(this.captureCanvas));
  }
  /**
   * Update the font used for rendering.
   * @param fontUrl The URL of the font to load.
   */
  async loadFont(A) {
    return this._fontManager.loadFont(A).then(() => {
      const e = this._fontManager.maxGlyphDimensions;
      this._grid.resizeCellPixelDimensions(e.width, e.height), this.brightnessConverter.resize(), this.renderer.resetViewport();
    });
  }
  /**
   * Apply textmode rendering to the canvas.
   */
  render() {
    this.canvasFramebuffer.update(this.captureCanvas), this.brightnessConverter.convert(this.canvasFramebuffer), this.resultFramebuffer.begin(), this.renderer.clear(), this.renderer.shader(this.asciiShader), this.renderer.setUniform("u_characterTexture", this._fontManager.fontFramebuffer), this.renderer.setUniform("u_charsetDimensions", [this._fontManager.textureColumns, this._fontManager.textureRows]), this.renderer.setUniform("u_asciiCharacterTexture", this.brightnessConverter.characterFramebuffer.texture), this.renderer.setUniform("u_primaryColorTexture", this.brightnessConverter.primaryColorFramebuffer.texture), this.renderer.setUniform("u_secondaryColorTexture", this.brightnessConverter.secondaryColorFramebuffer.texture), this.renderer.setUniform("u_transformTexture", this.brightnessConverter.transformFramebuffer.texture), this.renderer.setUniform("u_rotationTexture", this.brightnessConverter.rotationFramebuffer.texture), this.renderer.setUniform("u_captureTexture", this.canvasFramebuffer.texture), this.renderer.setUniform("u_backgroundMode", !1), this.renderer.setUniform("u_captureDimensions", [this.resultFramebuffer.width, this.resultFramebuffer.height]), this.renderer.setUniform("u_gridCellDimensions", [this._grid.cols, this._grid.rows]), this.renderer.setUniform("u_gridPixelDimensions", [this._grid.width, this._grid.height]), this.renderer.setUniform("u_pixelRatio", 1), this.renderer.rect(0, 0, this.resultFramebuffer.width, this.resultFramebuffer.height), this.resultFramebuffer.end(), this.renderer.clear(), this.renderer.image(this.resultFramebuffer, this._grid.offsetX, this._grid.offsetY, this.resultFramebuffer.width, this.resultFramebuffer.height);
  }
  /**
   * Set the global error handling level for the library. This applies to all `Textmodifier` instances.
   * @param level The error handling level to set.
   */
  setErrorLevel(A) {
    D.setGlobalLevel(A);
  }
  resize() {
    this.textmodeCanvas.resize(), this.canvasFramebuffer.resize(this.textmodeCanvas.width, this.textmodeCanvas.height), this._grid.updateCanvas(this.textmodeCanvas.canvas), this.resultFramebuffer.resize(this._grid.width, this._grid.height), this.brightnessConverter.resize(), this.renderer.resetViewport();
  }
  get grid() {
    return this._grid;
  }
  get fontManager() {
    return this._fontManager;
  }
}
export {
  R as TextmodeCanvas,
  U as TextmodeErrorLevel,
  T as TextmodeFont,
  Y as TextmodeGrid,
  d as Textmodifier
};
